cabal-version: 3.0
name: scherzo
version: 0.1.0.0
synopsis: Music notation language and toolbox
description:
    Scherzo is a set of tools for working with Western classical music
    notation.

    It comprises of an implementation of an experimental music type setting
    language Alma (named after the pianist and composer Alma Mahler).

    The plan is to support translating Alma to and from various other music
    notation formats â€“ especially LilyPond. Alma is supposed to be easier
    to type, edit and read than Lilypond. THe language syntax is configurable
    and it supports laying out simultaneously played sections of music so that
    they are visually aligned.

    Alma is expected to be especially convenient for composers and
    people using braille.
homepage: https://github.com/Merivuokko/scherzo
license: GPL-3.0-only
license-file: LICENSE
author: Aura Kelloniemi
maintainer: kaura.dev@sange.fi
extra-source-files:
    AUTHORS.md
    CHANGELOG.md
    README.md

flag Werror
    description: Enable -Werror for fixing all warnings
    default: False
    manual: True

flag Weverything
    description: Enable almost every possible warning
    default: False
    manual: True

common common
    build-depends:
        base ^>= { 4.15, 4.16 }
        text ^>=1.2

    default-extensions: NoStarIsType
    other-extensions: OverloadedStrings
    if impl(ghc >= 9.2)
        default-language: GHC2021
    else
        -- We are restricted to Haskell2010 language set by default. We thus
        -- enable all extensions of the later GHC language sets manually. Many
        -- of these probably are not used, but it is better to enable them
        -- here (just in case) than listing all extensions in module headers.
        default-language: Haskell2010
        default-extensions:
            BangPatterns,
            BinaryLiterals,
            ConstrainedClassMethods,
            ConstraintKinds,
            DeriveDataTypeable,
            DeriveFoldable,
            DeriveFunctor,
            DeriveGeneric,
            DeriveLift,
            DeriveTraversable,
            EmptyCase,
            EmptyDataDeriving,
            ExistentialQuantification,
            ExplicitForAll,
            FlexibleContexts,
            FlexibleInstances,
            GADTSyntax,
            GeneralisedNewtypeDeriving,
            HexFloatLiterals,
            ImportQualifiedPost,
            InstanceSigs,
            KindSignatures,
            MultiParamTypeClasses,
            NamedFieldPuns,
            NamedWildCards,
            NumericUnderscores,
            PolyKinds,
            PostfixOperators,
            RankNTypes,
            ScopedTypeVariables,
            StandaloneDeriving,
            StandaloneKindSignatures,
            TupleSections,
            TypeApplications,
            TypeOperators,
            TypeSynonymInstances

    ghc-options:
        -fshow-warning-groups

    if flag(Werror)
        ghc-options:
            -Werror

    if flag(Weverything)
        ghc-options:
            -Weverything
            -Wno-all-missed-specialisations
            -Wno-implicit-prelude
            -Wno-missed-specialisations
            -Wno-missing-import-lists
            -Wno-missing-safe-haskell-mode
            -Wno-monomorphism-restriction
            -Wno-safe
            -Wno-unsafe
    else
        ghc-options: -Wall -Wcompat

common megaparsec-dep
   build-depends:
        megaparsec ^>=9

common scherzo-dep
    build-depends:
        scherzo

library
    import: common, megaparsec-dep
    build-depends:
        hashable ^>=0.4,
        unordered-containers ^>=0.2.15
    exposed-modules:
        Alma.Parser
    hs-source-dirs: lib

executable alma2ly
    import: common, megaparsec-dep, scherzo-dep
    main-is: Main.hs
    build-depends:
        bytestring ^>=0.11,
        scherzo
    hs-source-dirs: src/alma2ly

test-suite scherzo-test
    import: common, scherzo-dep
    type: exitcode-stdio-1.0
    hs-source-dirs: test
    main-is: Main.hs
